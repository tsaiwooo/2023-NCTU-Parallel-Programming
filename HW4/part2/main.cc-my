#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/types.h>
#include <unistd.h>

int *matrix_a = NULL,*matrix_b=NULL;
int dim[3];
int *score;


int calculate(int row,int col)
{
    int val=0;
    for(int i=0 ; i<dim[1] ; i++){
        val += matrix_a[row*dim[1] + i] * matrix_b[i*dim[2] + col];
    }
    return val;
}

int check()
{
    for(int i=0 ; i<dim[0] ; i++){
        for(int j=0 ; j<dim[2] ; j++){
            if(score[i*dim[2]+j]==-1){
                return 0;
            }
        }
    }
    return 1;
}

int main()
{
    MPI_Init(NULL, NULL);
    double start_time = MPI_Wtime();
    int world_rank, world_size;

    MPI_Win win,win_a,win_b,win_dim;

    MPI_Comm_size(MPI_COMM_WORLD,&world_size);
    MPI_Comm_rank(MPI_COMM_WORLD,&world_rank);
    int tmp1=-1 ,tmp2,tmp3;

    //create shared memory
    // matrix_a = (int *)malloc(sizeof(int) * 10000*10000);
    // matrix_b = (int *)malloc(sizeof(int) *10000*10000);
    if(world_rank==0){
        int tmp;
        // dim = (int *)malloc(sizeof(int) * 3);
        // int tmp1,tmp2,tmp3;
        // MPI_Alloc_mem(3 * sizeof(int), MPI_INFO_NULL, &dim);
        // scanf("%d %d %d",&dim[0],&dim[1],&dim[2]);
        scanf("%d %d %d",&dim[0],&dim[1],&dim[2]);
        // printf("rank = %d n= %d m= %d l= %d\n",world_rank,n,m,l);
        // MPI_Win_create(dim, 3* sizeof( int), sizeof(int), MPI_INFO_NULL,
        //   MPI_COMM_WORLD, &win_dim);

        // MPI_Alloc_mem(dim[0] * dim[1] * sizeof(int), MPI_INFO_NULL, &matrix_a);
        // MPI_Alloc_mem(dim[1] * dim[2] * sizeof(int), MPI_INFO_NULL, &matrix_b);

        // MPI_Alloc_mem(tmp1 * tmp2 * sizeof(int), MPI_INFO_NULL, &matrix_a);
        // MPI_Alloc_mem(tmp2 * tmp3 * sizeof(int), MPI_INFO_NULL, &matrix_b);
        matrix_a = (int *)malloc(sizeof(int) * dim[0]*dim[1]);
        matrix_b = (int *)malloc(sizeof(int) *dim[1]*dim[2]);

        
        //data scanf
        for(int i=0 ; i<dim[0] ; i++){
            for(int j=0 ; j<dim[1] ; j++){
                scanf("%d",&matrix_a[i*dim[1] + j]);
                // printf("%d ",matrix_a[i*dim[1] + j]);
            }
            // printf("\n");
        }

        for(int i=0 ; i<dim[1] ; i++){
            for(int j=0 ; j<dim[2] ; j++){
                scanf("%d",&matrix_b[i*dim[2] + j]);
                // printf("%d ",matrix_b[i*dim[2] + j]);
            }
            // printf("\n");
        }

        // printf("exit1\n");
        MPI_Alloc_mem(dim[0] * dim[2] * sizeof(int), MPI_INFO_NULL, &score);

        for(int i=0 ; i<dim[0] ; i++){
            for(int j=0 ; j<dim[2] ; j++){
                score[i*dim[2] + j] = -1;
            }
        }

        // printf("exit2\n");

        //dimension
        // MPI_Win_create(dim, 3* sizeof( int), sizeof(int), MPI_INFO_NULL,
        //   MPI_COMM_WORLD, &win_dim);
        // printf("exit1\n");
        //matrix_a
        // MPI_Win_create(matrix_a, tmp1 * tmp2 * sizeof( int), sizeof(int), MPI_INFO_NULL,
        //   MPI_COMM_WORLD, &win_a);
        // printf("exit2\n");
        // //matrix_b
        // MPI_Win_create(matrix_b, tmp2 * tmp3 * sizeof( int), sizeof(int), MPI_INFO_NULL,
        //   MPI_COMM_WORLD, &win_b);
        // printf("exit3\n");
        
        MPI_Win_create(score, dim[0] * dim[2] * sizeof(int), sizeof(int), MPI_INFO_NULL,
          MPI_COMM_WORLD, &win);
        
    }
    else{
            MPI_Win_create(NULL, 0, 1, MPI_INFO_NULL,
            MPI_COMM_WORLD, &win);
    }
    MPI_Bcast(dim,3,MPI_INT,0,MPI_COMM_WORLD);

    if(world_rank!=0){
        matrix_a = (int *)malloc(sizeof(int) * dim[0]*dim[1]);
        matrix_b = (int *)malloc(sizeof(int) *dim[1]*dim[2]);
    
    }
    MPI_Bcast(matrix_a,dim[0]*dim[1],MPI_INT,0,MPI_COMM_WORLD);
    MPI_Bcast(matrix_b,dim[2]*dim[1],MPI_INT,0,MPI_COMM_WORLD);

    // printf("rank = %d in\n",world_rank);
    MPI_Barrier(MPI_COMM_WORLD);

        // printf("rank = %d\n",world_rank);
        // printf("rank = %d %d %d\n",world_rank,dim[0],dim[2]);
    for(int row=0 ; row < dim[0] ; row++){
        // for(int col = world_size-1 ; col < dim[2] ; col+=(world_size-1)){
        for(int col=0 ; col < dim[2] ; col++){
            if(((col%(world_size)))==world_rank){
                // printf("rank = %d , calculate col = %d\n",world_rank,col%(world_size-1));
                int val = calculate(row,col);
                // printf("return val = %lld\n",val);
                MPI_Win_lock(MPI_LOCK_EXCLUSIVE, 0, 0, win);
                MPI_Put(&val, 1, MPI_INT, 0, row*dim[2] + col , 1, MPI_INT, win);
                // printf("rank = %d place = %d , val = %lld\n",world_rank,row*dim[2] + col,val);
                MPI_Win_unlock(0, win);
            }
        }
    }
    

    if(world_rank==0){
        int ready = 0;
        while(!ready){
            MPI_Win_lock(MPI_LOCK_SHARED, 0, 0, win);
            ready = check();
            MPI_Win_unlock(0, win);
            // printf("stall\n");
        }
        for(int row=0 ; row<dim[0] ; row++){
            for(int col=0 ; col<dim[2] ; col++){
                char str[256];
                // if(col!=dim[2]-1)
                    printf("%d ",score[row*dim[2] + col]);
                    // sprintf(str,"%lld ",score[row*dim[2] + col]);
                // else if(col==dim[2]-1) //sprintf(str,"%lld \n",score[row*dim[2] + col]);
                    // printf("%lld",score[row*dim[2] + col]);
                // if(col==dim[2]-1) printf("%s ",str);//printf("%lld",score[row*dim[2] + col]);
                // else printf("%s",str);
                // printf("%s",str);
            }
            printf("\n");
        }
        double end_time = MPI_Wtime();
        printf("MPI running time: %lf Seconds\n", end_time - start_time);
        // MPI_Win_free(&win);
        // MPI_Win_free(&win_a);
        // MPI_Win_free(&win_b);
        MPI_Free_mem(score);
        // MPI_Free_mem(matrix_a);
        // MPI_Free_mem(matrix_b);
    }
    MPI_Barrier(MPI_COMM_WORLD);
    MPI_Win_free(&win);
    free(matrix_a);
    free(matrix_b);
    MPI_Finalize();
    return 0;
}